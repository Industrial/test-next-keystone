# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type List {
  id: ID!
  label: String
  creationDate: DateTime
  updateDate: DateTime
  user: User
  todos(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  todosCount(where: TodoWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ListWhereUniqueInput {
  id: ID
  label: String
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IDFilter
  label: StringFilter
  creationDate: DateTimeFilter
  updateDate: DateTimeFilter
  user: UserWhereInput
  todos: TodoManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TodoManyRelationFilter {
  every: TodoWhereInput
  some: TodoWhereInput
  none: TodoWhereInput
}

input ListOrderByInput {
  id: OrderDirection
  label: OrderDirection
  creationDate: OrderDirection
  updateDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ListUpdateInput {
  label: String
  creationDate: DateTime
  updateDate: DateTime
  user: UserRelateToOneForUpdateInput
  todos: TodoRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TodoRelateToManyForUpdateInput {
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

input ListUpdateArgs {
  where: ListWhereUniqueInput!
  data: ListUpdateInput!
}

input ListCreateInput {
  label: String
  creationDate: DateTime
  updateDate: DateTime
  user: UserRelateToOneForCreateInput
  todos: TodoRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TodoRelateToManyForCreateInput {
  create: [TodoCreateInput!]
  connect: [TodoWhereUniqueInput!]
}

type Tag {
  id: ID!
  label: String
  creationDate: DateTime
  updateDate: DateTime
  user: User
  todos(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  todosCount(where: TodoWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
  label: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  label: StringFilter
  creationDate: DateTimeFilter
  updateDate: DateTimeFilter
  user: UserWhereInput
  todos: TodoManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  label: OrderDirection
  creationDate: OrderDirection
  updateDate: OrderDirection
}

input TagUpdateInput {
  label: String
  creationDate: DateTime
  updateDate: DateTime
  user: UserRelateToOneForUpdateInput
  todos: TodoRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  label: String
  creationDate: DateTime
  updateDate: DateTime
  user: UserRelateToOneForCreateInput
  todos: TodoRelateToManyForCreateInput
}

type Todo {
  id: ID!
  label: String
  slug: String
  description: String
  isCompleted: Boolean
  priority: String
  dueDate: DateTime
  startDate: DateTime
  endDate: DateTime
  creationDate: DateTime
  updateDate: DateTime
  user: User
  list: List
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input TodoWhereUniqueInput {
  id: ID
  label: String
  slug: String
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  id: IDFilter
  label: StringFilter
  slug: StringFilter
  description: StringFilter
  isCompleted: BooleanFilter
  priority: StringFilter
  dueDate: DateTimeNullableFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  creationDate: DateTimeFilter
  updateDate: DateTimeFilter
  user: UserWhereInput
  list: ListWhereInput
  tags: TagManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TodoOrderByInput {
  id: OrderDirection
  label: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  isCompleted: OrderDirection
  priority: OrderDirection
  dueDate: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  creationDate: OrderDirection
  updateDate: OrderDirection
}

input TodoUpdateInput {
  label: String
  slug: String
  description: String
  isCompleted: Boolean
  priority: String
  dueDate: DateTime
  startDate: DateTime
  endDate: DateTime
  creationDate: DateTime
  updateDate: DateTime
  user: UserRelateToOneForUpdateInput
  list: ListRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ListRelateToOneForUpdateInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input TodoUpdateArgs {
  where: TodoWhereUniqueInput!
  data: TodoUpdateInput!
}

input TodoCreateInput {
  label: String
  slug: String
  description: String
  isCompleted: Boolean
  priority: String
  dueDate: DateTime
  startDate: DateTime
  endDate: DateTime
  creationDate: DateTime
  updateDate: DateTime
  user: UserRelateToOneForCreateInput
  list: ListRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ListRelateToOneForCreateInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type User {
  id: ID!
  username: String
  email: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  password: String
  isAdmin: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createList(data: ListCreateInput!): List
  createLists(data: [ListCreateInput!]!): [List]
  updateList(where: ListWhereUniqueInput!, data: ListUpdateInput!): List
  updateLists(data: [ListUpdateArgs!]!): [List]
  deleteList(where: ListWhereUniqueInput!): List
  deleteLists(where: [ListWhereUniqueInput!]!): [List]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createTodo(data: TodoCreateInput!): Todo
  createTodos(data: [TodoCreateInput!]!): [Todo]
  updateTodo(where: TodoWhereUniqueInput!, data: TodoUpdateInput!): Todo
  updateTodos(data: [TodoUpdateArgs!]!): [Todo]
  deleteTodo(where: TodoWhereUniqueInput!): Todo
  deleteTodos(where: [TodoWhereUniqueInput!]!): [Todo]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  lists(
    where: ListWhereInput! = {}
    orderBy: [ListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [List!]
  list(where: ListWhereUniqueInput!): List
  listsCount(where: ListWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  todos(
    where: TodoWhereInput! = {}
    orderBy: [TodoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Todo!]
  todo(where: TodoWhereUniqueInput!): Todo
  todosCount(where: TodoWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
